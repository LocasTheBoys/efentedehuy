-- Konfigurasi
wait(15)

local petName = "Security Puppet"
local waitTimeTeleport = 1
local waitTimeBetweenTeleports = 2
local waitTimeBetweenLoops = 2
local loopCount = 5
local targetWaves = { "Wave 40/∞", "Wave 41/∞" }
local stopWave = "Wave 50/∞"
local targetMoney = 20000000 -- Ubah jumlah target money sesuai kebutuhan
local PlacementMaxCap = 2 -- Kapasitas maksimum unit yang bisa dipasang

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Money = Player:WaitForChild("Money")
local PathWaveDetection = Player.PlayerGui.Top.Wave
local TowersFolder = workspace:WaitForChild("Towers")
local executedWaves = {}
local stopLoop = false
local scriptExecuted = false -- Variabel untuk memastikan script hanya berjalan sekali

-- Fungsi untuk menghitung jumlah unit yang telah ditempatkan
local function countPlacedUnits(unitName)
    local count = 0
    for _, tower in pairs(TowersFolder:GetChildren()) do
        if tower.Name == unitName and tower:IsA("Model") then
            count = count + 1
        end
    end
    return count
end

-- Fungsi untuk menghitung midpoint dengan logika dari Kumpulan Script Koordinat
local function calculateAdjustedMidpoint(parts, offset)
    local midpoint1 = (parts[1].Position + parts[2].Position) / 2
    local midpoint2 = (parts[3].Position + parts[4].Position) / 2
    return ((midpoint1 + midpoint2) / 2) + offset
end

-- Fungsi teleportasi dan summon pet
local function teleportAndSummon(parts, offset)
    if stopLoop then return end

    local currentPlacementCount = countPlacedUnits(petName)
    if currentPlacementCount >= PlacementMaxCap then
        stopLoop = true
        print("Script dihentikan karena kapasitas maksimum unit tercapai.")
        
        -- Eksekusi loadstring jika kapasitas maksimum tercapai
        loadstring(game:HttpGet("https://raw.githubusercontent.com/LocasTheBoys/efentedehuy/refs/heads/main/Selesai"))()
        
        return
    end

    local character = Player.Character or Player.CharacterAdded:Wait()
    local adjustedPosition = calculateAdjustedMidpoint(parts, offset)
    character.HumanoidRootPart.CFrame = CFrame.new(adjustedPosition)

    task.wait(waitTimeTeleport)

    local argsReset = { [1] = "Reset" }
    game:GetService("ReplicatedStorage").Remotes.Misc.StopSettings:FireServer(unpack(argsReset))

    for i = 1, 68 do
        game:GetService("ReplicatedStorage").Remotes.Misc.StopSettings:FireServer()
    end

    local humanoidRootPartCFrame = character.HumanoidRootPart.CFrame
    local argsSummon = { [1] = petName, [2] = humanoidRootPartCFrame }
    game:GetService("ReplicatedStorage").Remotes.Towers.SummonTower:FireServer(unpack(argsSummon))
end

-- Fungsi untuk menyiapkan daftar koordinat teleportasi dengan posisi baru
local function setupPartList()
    local offsetList = {
        Vector3.new(25, 0, -21),   -- Offset posisi ke-1 (POSISI KE 1)
        Vector3.new(-17, 0, -21)  -- Offset posisi ke-2 (POSISI KE 2)
    }
    local partList = {}

    -- Untuk setiap offset, sesuaikan posisi teleportasi dan summon
    for _, offset in ipairs(offsetList) do
        local parts = {
            workspace.Map:WaitForChild("Paths"):WaitForChild("1"):WaitForChild("Start"),
            workspace.Map:WaitForChild("Paths"):WaitForChild("2"):WaitForChild("Start"),
            workspace.Map:WaitForChild("Paths"):WaitForChild("4"):WaitForChild("Start"),
            workspace.Map:WaitForChild("Paths"):WaitForChild("3"):WaitForChild("5"),
            workspace.Map:WaitForChild("Paths"):WaitForChild("2"):WaitForChild("5")
        }
        table.insert(partList, { parts = parts, offset = offset })
    end

    return partList
end

-- Fungsi utama untuk memulai summon dengan koordinat dari setupPartList
local function startSummoning()
    if scriptExecuted then return end
    scriptExecuted = true

    local partList = setupPartList()  -- Mengambil daftar koordinat dari fungsi setupPartList

    for i = 1, loopCount do
        if stopLoop then break end

        for _, partData in ipairs(partList) do
            teleportAndSummon(partData.parts, partData.offset)
            task.wait(waitTimeBetweenTeleports)
        end

        task.wait(waitTimeBetweenLoops)
    end
end

-- Listener untuk mendeteksi perubahan teks di PathWaveDetection
PathWaveDetection:GetPropertyChangedSignal("Text"):Connect(function()
    if scriptExecuted then return end
    local waveText = PathWaveDetection.Text
    if waveText == stopWave then
        stopLoop = true
        print("Loop dihentikan karena mencapai " .. stopWave)
        return
    end

    if table.find(targetWaves, waveText) and not executedWaves[waveText] then
        executedWaves[waveText] = true
        print("Target wave tercapai: " .. waveText)
        startSummoning()
    end
end)

-- Listener untuk mendeteksi perubahan nilai Money
Money:GetPropertyChangedSignal("Value"):Connect(function()
    if Money.Value >= targetMoney and not scriptExecuted then
        print("Jumlah money tercapai: " .. Money.Value)
        startSummoning()
    end
end)
